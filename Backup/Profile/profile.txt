import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  StyleSheet,
  ActivityIndicator,
  Alert,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation } from '@react-navigation/native';
import ProfileProvider from '../providers/profile/profile';
import { Api } from '../providers/api/api';

const ProfileScreen: React.FC = () => {
  const [userInfo, setUserInfo] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const navigation = useNavigation();
  const api = new Api('http://aggressionmanagement.com/api');
  const profileProvider = new ProfileProvider(api);

  useEffect(() => {
    const fetchStoredUser = async () => {
      try {
        const storedUser = await AsyncStorage.getItem('user');
        if (storedUser) {
          const parsedUser = JSON.parse(storedUser);
          fetchUserInfo(parsedUser);
        } else {
          navigation.navigate('LoginScreen');
        }
      } catch (error) {
        console.error('Failed to retrieve user from storage:', error);
        navigation.navigate('LoginScreen');
      }
    };

    fetchStoredUser();
  }, []);

  const fetchUserInfo = async (storedUser: any) => {
    setLoading(true);
    const userInfo = {
      user_id: storedUser.user_id,
      token: storedUser.token,
    };

    try {
      const response = await profileProvider.user_info(userInfo);

      if (response && response.status === 200) {
        const data = response.data;
        console.log('Received user data:', data);
        setLoading(false);

        if (data.subscriptionFlag === 1 && storedUser.client_id === '0') {
          if (data.user_type === 'tester') {
            Alert.alert(
              'Subscription Expired',
              'Your 60 days Free subscription ended. Please subscribe.',
              [
                { text: 'Cancel', onPress: () => logout() },
                { text: 'Continue', onPress: () => navigation.navigate('SubscriptionPage') },
              ]
            );
          } else {
            navigation.navigate('SubscriptionPage');
          }
        } else if (data.msg === "Your account is deactivated, please contact support.") {
          logout();
        } else {
          setUserInfo({
            firstname: data.firstname,
            surname: data.surname,
            profession: data.profession,
            organization: data.organization,
            profile_image: data.profile_image,
          });
        }
      } else {
        setLoading(false);
        Alert.alert('Error', `Server error: ${response.status}. Please try again later.`);
      }
    } catch (error) {
      setLoading(false);
      handleNetworkError(error);
    }
  };

  const handleNetworkError = (error: any) => {
    if (error.response) {
      Alert.alert('Error', `Server error: ${error.response.status}. Please try again later.`);
    } else if (error.request) {
      Alert.alert('Error', 'No response from server. Please try again later.');
    } else if (error.message === 'Network Error') {
      Alert.alert('Error', 'No internet connection, make sure Wi-Fi or cellular data is turned on, then try again.');
    } else {
      Alert.alert('Error', 'An unexpected error occurred. Please try again later.');
    }
  };

  const logout = async () => {
    try {
      await AsyncStorage.removeItem('user');
      navigation.navigate('LoginScreen');
    } catch (error) {
      console.error('Failed to log out:', error);
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#007BFF" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Image
        source={{ uri: userInfo?.profile_image || 'http://safetnet.site/Aggression_management/profile_images/default_profile.png' }}
        style={styles.profileImage}
        onError={() =>
          setUserInfo({
            ...userInfo,
            profile_image: 'http://safetnet.site/Aggression_management/profile_images/default_profile.png',
          })
        }
      />
      <Text style={styles.name}>{userInfo?.firstname} {userInfo?.surname}</Text>
      <Text style={styles.occupation}>{userInfo?.profession || ''}</Text>
      <Text style={styles.location}>{userInfo?.organization || ''}</Text>
      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('EditProfileScreen')}>
        <Text style={styles.buttonText}>Edit Profile</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('MyGroupScreen')}>
        <Text style={styles.buttonText}>My Groups</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.button} onPress={logout}>
        <Text style={styles.buttonText}>Logout</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 16,
  },
  name: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
    color: 'black',
  },
  occupation: {
    fontSize: 18,
    marginBottom: 8,
  },
  location: {
    fontSize: 16,
    marginBottom: 16,
  },
  button: {
    backgroundColor: '#007BFF',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginVertical: 8,
    width: '100%',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});

export default ProfileScreen;
