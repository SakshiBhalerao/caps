import React, { useEffect, useState } from 'react';
import { View, Text, Image, TextInput, Button, TouchableOpacity, ActivityIndicator, Alert, StyleSheet, ScrollView, Platform } from 'react-native';
import { useForm, Controller } from 'react-hook-form';
import { Picker } from '@react-native-picker/picker';
import ImagePicker from 'react-native-image-picker';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Api } from '../providers/api/api';
import ProfileProvider from '../providers/profile/profile';
import CountryProvider from '../providers/country/country';

// Replace with your API base URL
const API_URL = 'http://aggressionmanagement.com/api';

// Initialize Api and Providers
const api = new Api(API_URL);
const profileProvider = new ProfileProvider(api);
const countryProvider = new CountryProvider(api);

const EditProfileScreen = () => {
  const { control, handleSubmit, setValue, getValues } = useForm();
  const [loading, setLoading] = useState(false);
  const [userInformation, setUserInformation] = useState<any>(null);
  const [countries, setCountries] = useState<any[]>([]);
  const [states, setStates] = useState<any[]>([]);
  const [selectedCountry, setSelectedCountry] = useState<any>(null);
  const [selectedState, setSelectedState] = useState<any>(null);
  const navigation = useNavigation();

  useEffect(() => {
    const fetchUserInfo = async () => {
      setLoading(true);
      try {
        const userData = await AsyncStorage.getItem('user');
        const { user_id, token } = userData ? JSON.parse(userData) : {};

        if (!user_id || !token) {
          Alert.alert('Error', 'User not authenticated.');
          return;
        }

        const response = await profileProvider.user_info({ user_id, token });
        const userDataResponse = response.data;

        setUserInformation(userDataResponse);
        setValue('fname', userDataResponse.firstname);
        setValue('lname', userDataResponse.surname);
        setValue('email', userDataResponse.email);
        setValue('title', userDataResponse.title);
        setValue('Organization', userDataResponse.organization);
        setValue('Profession', userDataResponse.profession);
        setValue('country', userDataResponse.country);

        setValue('state', userDataResponse.state);

       
      } finally {
        setLoading(false);
      }
    };
    fetchUserInfo();
  }, [setValue]);

  const onCountryChange = async (countryId: string) => {
    setSelectedCountry(countryId);
    setLoading(true);
    try {
      const userData = await AsyncStorage.getItem('user');
      const { token } = userData ? JSON.parse(userData) : {};
      const statesData = await countryProvider.getStates(countryId, token);
      setStates(statesData);

      // Update the country name when the user selects a different country
      const country = countries.find(country => country.country_id === countryId);
      if (country) {
        setValue('countryName', country.country_name);
      }
    } catch (error) {
      console.error(error);
      Alert.alert('Error', 'Failed to fetch states.');
    } finally {
      setLoading(false);
    }
  };

  const onSubmit = async (data: any) => {
    setLoading(true);
    try {
      const userData = await AsyncStorage.getItem('user');
      const { user_id, token } = userData ? JSON.parse(userData) : {};
      if (!user_id || !token) {
        Alert.alert('Error', 'User not authenticated.');
        return;
      }
      // Perform profile update
      await profileProvider.updateProfile({ user_id, token, ...data });
      Alert.alert('Success', 'Profile updated successfully.');
      navigation.goBack();
    } catch (error) {
      console.error(error);
      Alert.alert('Error', 'Failed to update profile.');
    } finally {
      setLoading(false);
    }
  };

  const handleImagePick = () => {
    ImagePicker.launchImageLibrary({}, (response) => {
      if (response.error) {
        Alert.alert('Error', 'Image selection failed.');
      } else if (!response.didCancel) {
        setValue('profilePic', response.uri);
      }
    });
  };

  if (loading) {
    return <ActivityIndicator size="large" color="#0000ff" />;
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <View style={styles.profileImageWrapper}>
        <TouchableOpacity onPress={handleImagePick}>
          {getValues('profilePic') ? (
            <Image source={{ uri: getValues('profilePic') }} style={styles.profileImage} />
          ) : (
            <View style={styles.profileImagePlaceholder}>
              {/* Add icon or placeholder */}
            </View>
          )}
        </TouchableOpacity>
      </View>
      <Controller
        control={control}
        name="email"
        render={({ field: { onChange, onBlur, value } }) => (
          <View style={styles.item}>
            <Text style={styles.subTitle}>E-mail</Text>
            <TextInput
              style={styles.textInput}
              onBlur={onBlur}
              onChangeText={onChange}
              value={value}
              editable={false}
            />
          </View>
        )}
      />
      <Controller
        control={control}
        name="fname"
        render={({ field: { onChange, onBlur, value } }) => (
          <View style={styles.item}>
            <Text style={styles.subTitle}>First Name</Text>
            <TextInput
              style={styles.textInput}
              onBlur={onBlur}
              onChangeText={onChange}
              value={value}
            />
          </View>
        )}
      />
      <Controller
        control={control}
        name="lname"
        render={({ field: { onChange, onBlur, value } }) => (
          <View style={styles.item}>
            <Text style={styles.subTitle}>Last Name</Text>
            <TextInput
              style={styles.textInput}
              onBlur={onBlur}
              onChangeText={onChange}
              value={value}
            />
          </View>
        )}
      />
      <Controller
        control={control}
        name="title"
        render={({ field: { onChange, onBlur, value } }) => (
          <View style={styles.item}>
            <Text style={styles.subTitle}>Title</Text>
            <TextInput
              style={styles.textInput}
              onBlur={onBlur}
              onChangeText={onChange}
              value={value}
            />
          </View>
        )}
      />
      <Controller
        control={control}
        name="Organization"
        render={({ field: { onChange, onBlur, value } }) => (
          <View style={styles.item}>
            <Text style={styles.subTitle}>Organization</Text>
            <TextInput
              style={styles.textInput}
              onBlur={onBlur}
              onChangeText={onChange}
              value={value}
            />
          </View>
        )}
      />
      <Controller
        control={control}
        name="Profession"
        render={({ field: { onChange, onBlur, value } }) => (
          <View style={styles.item}>
            <Text style={styles.subTitle}>Profession</Text>
            <TextInput
              style={styles.textInput}
              onBlur={onBlur}
              onChangeText={onChange}
              value={value}
            />
          </View>
        )}
      />
      <View style={styles.item}>
        <Text style={styles.subTitle}>Country</Text>
        <Controller
          control={control}
          name="country"
          render={({ field: { value } }) => (
            <TextInput
              style={styles.textInput}
              value={value}
              editable={false}
            />
          )}
        />
        <Picker
          selectedValue={selectedCountry}
          style={styles.picker}
          onValueChange={(itemValue) => onCountryChange(itemValue)}
        >
          {countries.map((country) => (
            <Picker.Item key={country.country_id} label={country.country_name} value={country.country_id} />
          ))}
        </Picker>
      </View>
      <View style={styles.item}>
        <Text style={styles.subTitle}>State</Text>
        <Controller
          control={control}
          name="state"
          render={({ field: { value } }) => (
            <TextInput
              style={styles.textInput}
              value={value}
              editable={false}
            />
          )}
        />
        <Picker
          selectedValue={selectedState}
          style={styles.picker}
          onValueChange={(itemValue) => setSelectedState(itemValue)}
        >
          {states.map((state) => (
            <Picker.Item key={state.state_id} label={state.state_name} value={state.state_id} />
          ))}
        </Picker>
      </View>
      <Button title="Update Profile" onPress={handleSubmit(onSubmit)} />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
  },
  profileImageWrapper: {
    alignItems: 'center',
    marginBottom: 20,
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
  },
  profileImagePlaceholder: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#ccc',
  },
  item: {
    marginBottom: 20,
  },
  subTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 5,
  },
  picker: {
    height: 50,
    width: '100%',
  },
});

export default EditProfileScreen;
