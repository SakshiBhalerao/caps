import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  Platform,
  StyleSheet,
  ActivityIndicator,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import User from '../providers/user/User';
import { Api } from '../providers/api/api';
import DeviceInfo from 'react-native-device-info';

const LoginScreen: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [deviceToken, setDeviceToken] = useState('00000');
  const [imei, setImei] = useState('item');
  const navigation = useNavigation();
  const user = new User(new Api(), {}, {});

  useEffect(() => {
    if (Platform.OS === 'android') {
      DeviceInfo.getUniqueId().then(setImei);
    }
    AsyncStorage.getItem('device_id').then((value) => {
      if (value) {
        setDeviceToken(value);
      }
    });
  }, []);

  const handleLogin = () => {
    setLoading(true);
    const account = {
      email,
      password,
      device_type: Platform.OS,
      device_token: deviceToken,
      imei_no: imei,
    };
  
    user.login(account)
      .then((response: any) => {
        setLoading(false);
  
        // Extract the actual data from the response
        const loginRes = response.data;
  
        // Debugging: Log the extracted loginRes
        console.log("Extracted Login Response:", loginRes);
  
        // Check if the login was successful
        if (loginRes.result === 'success') {
          console.log("Login successful, navigating to ProfileScreen.");
          saveUserData(loginRes);  // Save the user data and navigate to ProfileScreen
        } else {
          console.log("Login failed, showing alert.");
          Alert.alert('Login Failed', loginRes.msg || 'Unknown error occurred.');
        }
      })
      .catch(error => {
        setLoading(false);
        console.error("Error during login:", error);
        Alert.alert('Error', 'An error occurred during login. Please try again.');
      });
  };
  
  
  
  

  const saveUserData = (loginRes: any) => {
    AsyncStorage.setItem('user', JSON.stringify(loginRes))
      .then(() => AsyncStorage.setItem('client_id', loginRes.client_id))
      .then(() => {
        // Navigate to ProfileScreen
        navigation.reset({
          index: 0,
          routes: [{ name: 'profile' }],
        });
      });
  };
  
  

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Login</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
      />
      <View style={styles.passwordContainer}>
        <TextInput
          style={styles.input}
          placeholder="Password"
          secureTextEntry={!passwordVisible}
          value={password}
          onChangeText={setPassword}
        />
        <TouchableOpacity onPress={() => setPasswordVisible(!passwordVisible)}>
          <Text style={styles.togglePassword}>{passwordVisible ? 'Hide' : 'Show'}</Text>
        </TouchableOpacity>
      </View>
      <TouchableOpacity style={styles.button} onPress={handleLogin}>
        {loading ? <ActivityIndicator size="small" color="#fff" /> : <Text style={styles.buttonText}>Login</Text>}
      </TouchableOpacity>
      <TouchableOpacity onPress={() => navigation.navigate('ForgotPasswordPage')}>
        <Text style={styles.link}>Forgot Password?</Text>
      </TouchableOpacity>
      <TouchableOpacity onPress={() => navigation.navigate('SignupScreen')}>
        <Text style={styles.link}>Don't have an account? Sign up</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 24,
    textAlign: 'center',
  },
  input: {
    borderBottomWidth: 1,
    borderColor: '#ccc',
    marginBottom: 16,
    padding: 8,
    fontSize: 16,
  },
  passwordContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  togglePassword: {
    color: '#007BFF',
    marginLeft: 8,
  },
  button: {
    backgroundColor: '#007BFF',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginVertical: 16,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  link: {
    color: '#007BFF',
    textAlign: 'center',
    marginVertical: 8,
  },
});

export default LoginScreen;
