import React from 'react';
import { View, Text, Image, TouchableOpacity, StyleSheet, Alert } from 'react-native';
import { Api } from '../providers/api/api';
import { DistributionlistProvider } from '../providers/distributionlist/distributionlist';
import { AggressionlevelProvider } from '../providers/aggressionlevel/aggressionlevel'; // Import AggressionlevelProvider
import AsyncStorage from '@react-native-async-storage/async-storage';
import ProfileProvider from '../providers/profile/profile';
import { useRoute } from '@react-navigation/native';

// Import all images
import info from '../assets/img/info.png';
import meter from '../assets/img/meter.png';
import back from '../assets/img/back.png';
import green_ar from '../assets/img/green_ar.png';

interface Props {
  navigation: any;
}

interface State {
  suspectInfo: any;
  pages: any[];
  number: number;
  state: string;
  shareShow: boolean;
  corporate: boolean;
  agressionResult: any;
  level: any[];
  otherFactor: any[];
  maxRating: any[];
  showColor: string;
  tabBarElement: any;
  storage: any;
  userName: string;
  colors: string; // To track colors for meter display
}

class AggressionMeterScreen extends React.Component<Props, State> {
  private api: Api;
  private distributionProvider: DistributionlistProvider;
  private profileProvider: ProfileProvider;
  private aggressionProvider: AggressionlevelProvider; // Add aggression provider

  constructor(props: Props) {
    super(props);
    this.api = new Api();
    this.distributionProvider = new DistributionlistProvider(this.api);
    this.profileProvider = new ProfileProvider(this.api);
    this.aggressionProvider = new AggressionlevelProvider(this.api); // Initialize provider

    this.state = {
      suspectInfo: {},
      pages: [
        { title: 'behavior', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'communication', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'interaction', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'demeanor', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'facial_expression', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'tactical_movement', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'other_concerning_factors', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'Files', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
        { title: 'best practices', icon: 'info', rating: '', select: '', colors: '', type_id: '' },
      ],
      number: 0,
      state: '0',
      shareShow: false,
      corporate: false,
      agressionResult: {},
      level: [],
      otherFactor: [],
      maxRating: [],
      showColor: '',
      tabBarElement: null,
      userName: '',
      colors: 'rgba(102, 102, 102, 0.5)', // Default color for the meter
    };
  }

  componentDidMount() {
    this.fetchUserName();
  }

  fetchUserName = async () => {
    try {
      const userData = await AsyncStorage.getItem('user');
      const { user_id, token } = userData ? JSON.parse(userData) : {};

      if (!user_id || !token) {
        Alert.alert('Error', 'User not authenticated.');
        return;
      }

      const response = await this.profileProvider.user_info({ user_id, token });
      const userDataResponse = response.data;

      this.setState({ userName: userDataResponse.firstname });
    } catch (error) {
      console.error('Error fetching user info:', error);
      Alert.alert('Error', 'Failed to fetch user information.');
    }
  };

  getQuestion = async (item: any) => {
 
    try {
      const userData = await AsyncStorage.getItem('user');
      const { user_id, token } = userData ? JSON.parse(userData) : {};

      if (!user_id || !token) {
        Alert.alert('Error', 'User not authenticated.');
        return;
      }

      const myModalData = {
        token: token,
        user_id: user_id,
        type: item.title,
      };

      // Call aggression level function before navigating if needed
      const aggressionInfo = { user_id, type: item.title };
      const aggressionResponse = await this.aggressionProvider.aggression_level(aggressionInfo);
      console.log('Aggression Level Response:', aggressionResponse.data); // Handle the response as needed

      this.props.navigation.navigate('QuestionPage', {
        data: myModalData,
        // onDismiss: this.handleModalDismiss,
      });
    } catch (error) {
      console.error('Error getting token or user_id:', error);
      Alert.alert('Error', 'Failed to get token or user_id.');
    }
  };

  handleModalDismiss = (data: any) => {
    if (data && data.qes[0]) {
      this.setState({ hide_: true });

      const { name, case_id, qes } = data;
      const { rating } = qes[0];

      if (name === 'other concerning factors') {
        this.setState((prevState) => ({
          otherFactor: [...prevState.otherFactor, { case_id, type_id: qes[0].id, type: name, rating }],
        }));
      } else {
        this.setState((prevState) => ({
          level: [...prevState.level, { case_id, type_id: qes[0].id, type: name, rating }],
        }));
      }

      this.updateMaxRating(name, rating);
      this.saveData();
    }
  };

  saveData = async () => {
    try {
      const { otherFactor, level } = this.state;
      await AsyncStorage.setItem('other_factor', JSON.stringify(otherFactor));
      await AsyncStorage.setItem('level', JSON.stringify(level));
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  updateMaxRating = (pageName: string, rating: number) => {
    this.setState(
      (prevState) => {
        const maxRatingExists = prevState.maxRating.find((item) => item.page === pageName);

        if (maxRatingExists) {
          return {
            maxRating: prevState.maxRating.map((item) =>
              item.page === pageName ? { ...item, data: rating } : item
            ),
          };
        } else {
          return {
            maxRating: [...prevState.maxRating, { page: pageName, data: rating }],
          };
        }
      },
      () => {
        this.updateNumberAndColor();
      }
    );
  };

  updateNumberAndColor = () => {
    const max = this.state.maxRating.reduce(
      (prev, current) => (prev.data > current.data ? prev : current),
      { data: 0 }
    );
    const { data: maxRating } = max;

    this.setState({ number: maxRating }, this.updateColor);
  };

  updateColor = () => {
    const { number } = this.state;

    if (number < 30) {
      this.setState({ showColor: 'rgba(0, 255, 0, 0.5)' }); // Green
    } else if (number < 60) {
      this.setState({ showColor: 'rgba(255, 255, 0, 0.5)' }); // Yellow
    } else {
      this.setState({ showColor: 'rgba(255, 0, 0, 0.5)' }); // Red
    }
  };

  render() {
    return (
      <View style={styles.container}>
        {/* Render content based on the state */}
        <Text style={styles.userNameText}>{this.state.userName}</Text>
        <View style={styles.meterContainer}>
          <Image source={meter} style={styles.meterImage} />
          <View style={[styles.colorOverlay, { backgroundColor: this.state.showColor }]} />
        </View>
        <Text style={styles.ratingText}>Aggression Level: {this.state.number}</Text>
        <TouchableOpacity onPress={() => this.props.navigation.goBack()}>
          <Image source={back} style={styles.backButton} />
        </TouchableOpacity>
        {/* Map through the pages to render buttons */}
        {this.state.pages.map((item, index) => (
          <TouchableOpacity key={index} onPress={() => this.getQuestion(item)}>
            <Image source={info} style={styles.infoIcon} />
            <Text>{item.title}</Text>
          </TouchableOpacity>
        ))}
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    alignItems: 'center',
  },
  userNameText: {
    fontSize: 20,
    marginBottom: 20,
  },
  meterContainer: {
    position: 'relative',
  },
  meterImage: {
    width: 200,
    height: 100,
  },
  colorOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    opacity: 0.5,
  },
  ratingText: {
    fontSize: 18,
    marginVertical: 20,
  },
  backButton: {
    width: 50,
    height: 50,
  },
  infoIcon: {
    width: 30,
    height: 30,
  },
});

export default AggressionMeterScreen;